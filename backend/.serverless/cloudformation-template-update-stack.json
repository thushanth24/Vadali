{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-login"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-register"
      }
    },
    "RefreshTokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-refreshToken"
      }
    },
    "LogoutLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-logout"
      }
    },
    "GetUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getUsers"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getUser"
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-createUser"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateUser"
      }
    },
    "DeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-deleteUser"
      }
    },
    "GetArticlesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getArticles"
      }
    },
    "GetArticleByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getArticleById"
      }
    },
    "GetArticleBySlugLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getArticleBySlug"
      }
    },
    "CreateArticleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-createArticle"
      }
    },
    "UpdateArticleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateArticle"
      }
    },
    "DeleteArticleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-deleteArticle"
      }
    },
    "UpdateArticleStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateArticleStatus"
      }
    },
    "UpdateFeaturedStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateFeaturedStatus"
      }
    },
    "GetCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getCategories"
      }
    },
    "CreateCategoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-createCategory"
      }
    },
    "UpdateCategoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateCategory"
      }
    },
    "DeleteCategoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-deleteCategory"
      }
    },
    "GetPendingCommentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getPendingComments"
      }
    },
    "PostCommentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-postComment"
      }
    },
    "UpdateCommentStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-updateCommentStatus"
      }
    },
    "GetNotificationsForUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getNotificationsForUser"
      }
    },
    "GetAllTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getAllTags"
      }
    },
    "GetSubscribersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-getSubscribers"
      }
    },
    "SubscribeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-subscribe"
      }
    },
    "ContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vadali-media-backend-dev-contact"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "vadali-media-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vadali-media-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vadali-media-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-articles-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-articles-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-users-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-users-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-categories-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/vadali-media-categories-dev/index/*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "vadali-media-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.login",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.register",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "RefreshTokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.refreshToken",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-refreshToken",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RefreshTokenLogGroup"
      ]
    },
    "LogoutLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.logout",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-logout",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogoutLogGroup"
      ]
    },
    "GetUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getUsers",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUsersLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.createUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-createUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "DeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.deleteUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-deleteUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserLogGroup"
      ]
    },
    "GetArticlesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getArticles",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getArticles",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetArticlesLogGroup"
      ]
    },
    "GetArticleByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getArticleById",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getArticleById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetArticleByIdLogGroup"
      ]
    },
    "GetArticleBySlugLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getArticleBySlug",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getArticleBySlug",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetArticleBySlugLogGroup"
      ]
    },
    "CreateArticleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.createArticle",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-createArticle",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateArticleLogGroup"
      ]
    },
    "UpdateArticleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateArticle",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateArticle",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateArticleLogGroup"
      ]
    },
    "DeleteArticleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.deleteArticle",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-deleteArticle",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteArticleLogGroup"
      ]
    },
    "UpdateArticleStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateArticleStatus",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateArticleStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateArticleStatusLogGroup"
      ]
    },
    "UpdateFeaturedStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateFeaturedStatus",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateFeaturedStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateFeaturedStatusLogGroup"
      ]
    },
    "GetCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getCategories",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCategoriesLogGroup"
      ]
    },
    "CreateCategoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.createCategory",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-createCategory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCategoryLogGroup"
      ]
    },
    "UpdateCategoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateCategory",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateCategory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCategoryLogGroup"
      ]
    },
    "DeleteCategoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.deleteCategory",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-deleteCategory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCategoryLogGroup"
      ]
    },
    "GetPendingCommentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getPendingComments",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getPendingComments",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetPendingCommentsLogGroup"
      ]
    },
    "PostCommentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.postComment",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-postComment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostCommentLogGroup"
      ]
    },
    "UpdateCommentStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.updateCommentStatus",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-updateCommentStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCommentStatusLogGroup"
      ]
    },
    "GetNotificationsForUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getNotificationsForUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getNotificationsForUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetNotificationsForUserLogGroup"
      ]
    },
    "GetAllTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getAllTags",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getAllTags",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllTagsLogGroup"
      ]
    },
    "GetSubscribersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.getSubscribers",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-getSubscribers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSubscribersLogGroup"
      ]
    },
    "SubscribeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.subscribe",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-subscribe",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubscribeLogGroup"
      ]
    },
    "ContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vadali-media-backend/dev/1760078087077-2025-10-10T06:34:47.077Z/vadali-media-backend.zip"
        },
        "Handler": "src/handlers.contact",
        "Runtime": "nodejs20.x",
        "FunctionName": "vadali-media-backend-dev-contact",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ARTICLES_TABLE": "vadali-media-articles-dev",
            "USERS_TABLE": "vadali-media-users-dev",
            "CATEGORIES_TABLE": "vadali-media-categories-dev",
            "ALLOWED_ORIGIN": "http://localhost:3000"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ContactLogGroup"
      ]
    },
    "LoginLambdaVersionOadvHgMoYDbIl3UUPTAzYub6CUBqTruarVcjeHQFA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "RegisterLambdaVersionfGZfJQJsBxOt5wAaGGF5INFVmhICHG3KGAjFZWcx1g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "RefreshTokenLambdaVersionaUkRX6tfUZiVtjDvQWV1NcvYC99hV5aus0D8cEDHc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RefreshTokenLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "LogoutLambdaVersionA0EIUejXBdUBGqmAP4OZE77S3bNZSbqxIIx32wKYDA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LogoutLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetUsersLambdaVersionBlG1e2XaA1C4qi2EcQSQ8EBL4uujpTojOto9g0L0mjs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetUserLambdaVersion659NwtGnvD2jJI4eWF9gR6NS4Wjw8pRoRristB4qwfw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "CreateUserLambdaVersionQ7JC3Db1Gc6YvWvu8dp2ABwGOwv8w0yP0bDcGUGzsos": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateUserLambdaVersionnCkufeRsaR0EFnFLr9YVxW83Swm4jQzZp296IGdaaY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "DeleteUserLambdaVersionTYQCqCG2nw3F6UtqbXKHLgQJmBRUDT5HTjjPI7nAbpA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetArticlesLambdaVersionz1Cjuu4unMhsNFhOxXXIgakUxCwBwNiy0o35vHhrzA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetArticlesLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetArticleByIdLambdaVersionNuCVNKqp6sVYEWM3LrbSIhH3fEog8BYSdEedzyWNU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetArticleByIdLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetArticleBySlugLambdaVersionI5vR054ThTsLzISiQd7o2RRDzZ0nkvcYHVQqDEsgY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetArticleBySlugLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "CreateArticleLambdaVersionhFkG8XvisZfUFIgjNDr1tAWAREWhb56EreYuFL1SDeE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateArticleLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateArticleLambdaVersionKSrhDxlUcnebiFOzX4kKrFOGJMbzUT37UqvkLXI14o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateArticleLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "DeleteArticleLambdaVersionh4dEEjFlaePpDGQIO6PEieKdxncEi1fHArcOSFiAnec": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteArticleLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateArticleStatusLambdaVersionroQq6ZPCb0CLqIGZkQOMK4qdA0qt8ykyb9ZYq7A72M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateArticleStatusLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateFeaturedStatusLambdaVersionxvhbRbhvts3UqApGQapE7h1uwVxWYDKiJr5z42RLoY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateFeaturedStatusLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetCategoriesLambdaVersion4vKhsXAwj1MgkH3i6RnAr51ykIiKdkoFDoh0sOrZaM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCategoriesLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "CreateCategoryLambdaVersionaJh3fV77E19A1Szyx5OQmefyYh6UCG1h6t7UfWuTvY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCategoryLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateCategoryLambdaVersionvpPBhViAuntBGcNm8PjJtQZwyHoRtUH5NdQXFwPjw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCategoryLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "DeleteCategoryLambdaVersiondIPHp51BsyCNsO45eoayVNMXuYqiDn55YlE6e1bUH8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCategoryLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetPendingCommentsLambdaVersionNp32SZbzKFCngkE85jH4QS0Q7Ep95NadC02PZcGCIs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPendingCommentsLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "PostCommentLambdaVersionvS8EpZje8wsOtA7DY0uqfA0j7Tohej3kNT6zF7FgClk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostCommentLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "UpdateCommentStatusLambdaVersioneL91XdWqZzQdeWfctpyqcg9ANYKc8PXS6azQdfPma7A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCommentStatusLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetNotificationsForUserLambdaVersionk6eSq05wCaOEf1PDVdM7Ii1VNuUiwA4KwbTpferTWM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetNotificationsForUserLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetAllTagsLambdaVersionGjMXPiUhfTLhaluw5OXQ9aFhslmIoRi6Fud92AkaxJg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllTagsLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "GetSubscribersLambdaVersion2hS4tKeqmh3pVmWPNrfGlV7wTZ7QrRnnyC7ETdgW08": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSubscribersLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "SubscribeLambdaVersionTIs8OgyWhy9shyLTJVR6ct5amlsdm5vwqdyTxdCbOw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubscribeLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "ContactLambdaVersiontrEi9ik1hoNQpP2EV1VLbl7BBkIslN1h29XZbVIMxk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ContactLambdaFunction"
        },
        "CodeSha256": "DsuKwan9l6UI2biR3UphfIZvrVKddpn3CdUAmSRIMnc="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-vadali-media-backend",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowCredentials": true,
          "AllowHeaders": [
            "Content-Type",
            "Authorization",
            "X-Amz-Date",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent"
          ],
          "AllowMethods": [
            "OPTIONS",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "AllowOrigins": [
            "http://localhost:3000"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "LoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogin"
    },
    "RegisterLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegister": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthRegister": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/register",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegister"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegister"
    },
    "RefreshTokenLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshTokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRefreshToken": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RefreshTokenLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthRefresh": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/refresh",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRefreshToken"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRefreshToken"
    },
    "LogoutLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LogoutLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogout": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LogoutLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthLogout": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/logout",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogout"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogout"
    },
    "GetUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUsers"
    },
    "GetUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsersIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUser"
    },
    "CreateUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateUser"
    },
    "UpdateUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsersIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /users/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateUser"
    },
    "DeleteUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteUsersIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /users/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteUser"
    },
    "GetArticlesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetArticlesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetArticles": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetArticlesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetArticles": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /articles",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetArticles"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetArticles"
    },
    "GetArticleByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetArticleByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetArticleById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetArticleByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetArticlesIdIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /articles/id/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetArticleById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetArticleById"
    },
    "GetArticleBySlugLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetArticleBySlugLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetArticleBySlug": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetArticleBySlugLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetArticlesSlugSlugVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /articles/slug/{slug}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetArticleBySlug"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetArticleBySlug"
    },
    "CreateArticleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateArticleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateArticle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateArticleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostArticles": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /articles",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateArticle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateArticle"
    },
    "UpdateArticleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateArticleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateArticle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateArticleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutArticlesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /articles/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateArticle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateArticle"
    },
    "DeleteArticleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteArticleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteArticle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteArticleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteArticlesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /articles/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteArticle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteArticle"
    },
    "UpdateArticleStatusLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateArticleStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateArticleStatus": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateArticleStatusLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutArticlesIdVarStatus": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /articles/{id}/status",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateArticleStatus"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateArticleStatus"
    },
    "UpdateFeaturedStatusLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateFeaturedStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateFeaturedStatus": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateFeaturedStatusLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostArticlesFeatured": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /articles/featured",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateFeaturedStatus"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateFeaturedStatus"
    },
    "GetCategoriesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCategories": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCategories": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /categories",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCategories"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCategories"
    },
    "CreateCategoryLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCategoryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateCategory": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateCategoryLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCategories": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /categories",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateCategory"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateCategory"
    },
    "UpdateCategoryLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCategoryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCategory": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCategoryLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCategoriesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /categories/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCategory"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCategory"
    },
    "DeleteCategoryLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCategoryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteCategory": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteCategoryLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCategoriesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /categories/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteCategory"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteCategory"
    },
    "GetPendingCommentsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPendingCommentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPendingComments": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPendingCommentsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCommentsPending": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /comments/pending",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPendingComments"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPendingComments"
    },
    "PostCommentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostCommentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPostComment": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PostCommentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostArticlesIdVarComments": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /articles/{id}/comments",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPostComment"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationPostComment"
    },
    "UpdateCommentStatusLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCommentStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCommentStatus": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCommentStatusLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutArticlesArticleidVarCommentsCommentidVarStatus": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /articles/{articleId}/comments/{commentId}/status",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCommentStatus"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCommentStatus"
    },
    "GetNotificationsForUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetNotificationsForUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetNotificationsForUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetNotificationsForUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetNotificationsUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /notifications/user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetNotificationsForUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetNotificationsForUser"
    },
    "GetAllTagsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllTags": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllTagsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTags": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tags",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllTags"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllTags"
    },
    "GetSubscribersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSubscribersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetSubscribers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetSubscribersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetSubscribers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /subscribers",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetSubscribers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetSubscribers"
    },
    "SubscribeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubscribeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSubscribe": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SubscribeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostSubscribe": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /subscribe",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSubscribe"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSubscribe"
    },
    "ContactLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationContact": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ContactLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostContact": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /contact",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationContact"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationContact"
    },
    "ArticlesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "vadali-media-articles-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "slug",
            "AttributeType": "S"
          },
          {
            "AttributeName": "categoryId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "slug-index",
            "KeySchema": [
              {
                "AttributeName": "slug",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "category-index",
            "KeySchema": [
              {
                "AttributeName": "categoryId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "vadali-media-users-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "email-index",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "CategoriesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "vadali-media-categories-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionOadvHgMoYDbIl3UUPTAzYub6CUBqTruarVcjeHQFA"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersionfGZfJQJsBxOt5wAaGGF5INFVmhICHG3KGAjFZWcx1g"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "RefreshTokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RefreshTokenLambdaVersionaUkRX6tfUZiVtjDvQWV1NcvYC99hV5aus0D8cEDHc"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-RefreshTokenLambdaFunctionQualifiedArn"
      }
    },
    "LogoutLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LogoutLambdaVersionA0EIUejXBdUBGqmAP4OZE77S3bNZSbqxIIx32wKYDA"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-LogoutLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionBlG1e2XaA1C4qi2EcQSQ8EBL4uujpTojOto9g0L0mjs"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersion659NwtGnvD2jJI4eWF9gR6NS4Wjw8pRoRristB4qwfw"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersionQ7JC3Db1Gc6YvWvu8dp2ABwGOwv8w0yP0bDcGUGzsos"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersionnCkufeRsaR0EFnFLr9YVxW83Swm4jQzZp296IGdaaY"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserLambdaVersionTYQCqCG2nw3F6UtqbXKHLgQJmBRUDT5HTjjPI7nAbpA"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-DeleteUserLambdaFunctionQualifiedArn"
      }
    },
    "GetArticlesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetArticlesLambdaVersionz1Cjuu4unMhsNFhOxXXIgakUxCwBwNiy0o35vHhrzA"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetArticlesLambdaFunctionQualifiedArn"
      }
    },
    "GetArticleByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetArticleByIdLambdaVersionNuCVNKqp6sVYEWM3LrbSIhH3fEog8BYSdEedzyWNU"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetArticleByIdLambdaFunctionQualifiedArn"
      }
    },
    "GetArticleBySlugLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetArticleBySlugLambdaVersionI5vR054ThTsLzISiQd7o2RRDzZ0nkvcYHVQqDEsgY"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetArticleBySlugLambdaFunctionQualifiedArn"
      }
    },
    "CreateArticleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateArticleLambdaVersionhFkG8XvisZfUFIgjNDr1tAWAREWhb56EreYuFL1SDeE"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-CreateArticleLambdaFunctionQualifiedArn"
      }
    },
    "UpdateArticleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateArticleLambdaVersionKSrhDxlUcnebiFOzX4kKrFOGJMbzUT37UqvkLXI14o"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateArticleLambdaFunctionQualifiedArn"
      }
    },
    "DeleteArticleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteArticleLambdaVersionh4dEEjFlaePpDGQIO6PEieKdxncEi1fHArcOSFiAnec"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-DeleteArticleLambdaFunctionQualifiedArn"
      }
    },
    "UpdateArticleStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateArticleStatusLambdaVersionroQq6ZPCb0CLqIGZkQOMK4qdA0qt8ykyb9ZYq7A72M"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateArticleStatusLambdaFunctionQualifiedArn"
      }
    },
    "UpdateFeaturedStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateFeaturedStatusLambdaVersionxvhbRbhvts3UqApGQapE7h1uwVxWYDKiJr5z42RLoY"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateFeaturedStatusLambdaFunctionQualifiedArn"
      }
    },
    "GetCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCategoriesLambdaVersion4vKhsXAwj1MgkH3i6RnAr51ykIiKdkoFDoh0sOrZaM"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "CreateCategoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCategoryLambdaVersionaJh3fV77E19A1Szyx5OQmefyYh6UCG1h6t7UfWuTvY"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-CreateCategoryLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCategoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCategoryLambdaVersionvpPBhViAuntBGcNm8PjJtQZwyHoRtUH5NdQXFwPjw"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateCategoryLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCategoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCategoryLambdaVersiondIPHp51BsyCNsO45eoayVNMXuYqiDn55YlE6e1bUH8"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-DeleteCategoryLambdaFunctionQualifiedArn"
      }
    },
    "GetPendingCommentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPendingCommentsLambdaVersionNp32SZbzKFCngkE85jH4QS0Q7Ep95NadC02PZcGCIs"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetPendingCommentsLambdaFunctionQualifiedArn"
      }
    },
    "PostCommentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostCommentLambdaVersionvS8EpZje8wsOtA7DY0uqfA0j7Tohej3kNT6zF7FgClk"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-PostCommentLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCommentStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCommentStatusLambdaVersioneL91XdWqZzQdeWfctpyqcg9ANYKc8PXS6azQdfPma7A"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-UpdateCommentStatusLambdaFunctionQualifiedArn"
      }
    },
    "GetNotificationsForUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetNotificationsForUserLambdaVersionk6eSq05wCaOEf1PDVdM7Ii1VNuUiwA4KwbTpferTWM"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetNotificationsForUserLambdaFunctionQualifiedArn"
      }
    },
    "GetAllTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllTagsLambdaVersionGjMXPiUhfTLhaluw5OXQ9aFhslmIoRi6Fud92AkaxJg"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetAllTagsLambdaFunctionQualifiedArn"
      }
    },
    "GetSubscribersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSubscribersLambdaVersion2hS4tKeqmh3pVmWPNrfGlV7wTZ7QrRnnyC7ETdgW08"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-GetSubscribersLambdaFunctionQualifiedArn"
      }
    },
    "SubscribeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubscribeLambdaVersionTIs8OgyWhy9shyLTJVR6ct5amlsdm5vwqdyTxdCbOw"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-SubscribeLambdaFunctionQualifiedArn"
      }
    },
    "ContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ContactLambdaVersiontrEi9ik1hoNQpP2EV1VLbl7BBkIslN1h29XZbVIMxk"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-ContactLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-vadali-media-backend-dev-HttpApiUrl"
      }
    }
  }
}
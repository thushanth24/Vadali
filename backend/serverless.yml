
service: vadali-media-backend

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}/index/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:3000'
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
      allowCredentials: true
  stage: ${opt:stage, 'dev'}
  environment:
    ARTICLES_TABLE: vadali-media-articles-${self:provider.stage}
    USERS_TABLE: vadali-media-users-${self:provider.stage}
    CATEGORIES_TABLE: vadali-media-categories-${self:provider.stage}
    S3_BUCKET_NAME: 'vadaliarticles'
    ALLOWED_ORIGIN: ${env:FRONTEND_ORIGIN, 'http://localhost:3000'}

functions:
  # Auth
  login:
    handler: src/handlers.login
    events:
      - httpApi: 'POST /auth/login'
  register:
    handler: src/handlers.register
    events:
      - httpApi: 'POST /auth/register'

  refreshToken:
    handler: src/handlers.refreshToken
    events:
      - httpApi: 'POST /auth/refresh'
  logout:
    handler: src/handlers.logout
    events:
      - httpApi: 'POST /auth/logout'

  # Users
  getUsers:
    handler: src/handlers.getUsers
    events:
      - httpApi: 'GET /users'
  getUser:
    handler: src/handlers.getUser
    events:
      - httpApi: 'GET /users/{id}'
  createUser:
    handler: src/handlers.createUser
    events:
      - httpApi: 'POST /users'
  updateUser:
    handler: src/handlers.updateUser
    events:
      - httpApi: 'PUT /users/{id}'
  deleteUser:
    handler: src/handlers.deleteUser
    events:
      - httpApi: 'DELETE /users/{id}'

  # Articles
  getArticles:
    handler: src/handlers.getArticles
    events:
      - httpApi: 'GET /articles'
  getArticleById:
    handler: src/handlers.getArticleById
    events:
      - httpApi: 'GET /articles/id/{id}'
  getArticleBySlug:
    handler: src/handlers.getArticleBySlug
    events:
      - httpApi: 'GET /articles/slug/{slug}'
  createArticle:
    handler: src/handlers.createArticle
    events:
      - httpApi: 'POST /articles'
  updateArticle:
    handler: src/handlers.updateArticle
    events:
      - httpApi: 'PUT /articles/{id}'
  deleteArticle:
    handler: src/handlers.deleteArticle
    events:
      - httpApi: 'DELETE /articles/{id}'
  updateArticleStatus:
    handler: src/handlers.updateArticleStatus
    events:
      - httpApi: 'PUT /articles/{id}/status'
  updateFeaturedStatus:
    handler: src/handlers.updateFeaturedStatus
    events:
      - httpApi: 'POST /articles/featured'

  # Categories
  getCategories:
    handler: src/handlers.getCategories
    events:
      - httpApi: 'GET /categories'
  createCategory:
    handler: src/handlers.createCategory
    events:
      - httpApi: 'POST /categories'
  updateCategory:
    handler: src/handlers.updateCategory
    events:
      - httpApi: 'PUT /categories/{id}'
  deleteCategory:
    handler: src/handlers.deleteCategory
    events:
      - httpApi: 'DELETE /categories/{id}'
      
  # Comments
  getPendingComments:
    handler: src/handlers.getPendingComments
    events:
      - httpApi: 'GET /comments/pending'
  postComment:
    handler: src/handlers.postComment
    events:
      - httpApi: 'POST /articles/{id}/comments'
  updateCommentStatus:
    handler: src/handlers.updateCommentStatus
    events:
      - httpApi: 'PUT /articles/{articleId}/comments/{commentId}/status'

  # Notifications
  getNotificationsForUser:
    handler: src/handlers.getNotificationsForUser
    events:
      - httpApi: 'GET /notifications/user/{userId}'

  # Tags
  getAllTags:
    handler: src/handlers.getAllTags
    events:
      - httpApi: 'GET /tags'
      
  # Misc
  getSubscribers:
    handler: src/handlers.getSubscribers
    events:
      - httpApi: 'GET /subscribers'
  subscribe:
    handler: src/handlers.subscribe
    events:
      - httpApi: 'POST /subscribe'
  contact:
    handler: src/handlers.contact
    events:
      - httpApi: 'POST /contact'
      
  # File Upload
  getUploadUrl:
    handler: src/handlers.getUploadUrl
    events:
      - httpApi:
          method: POST
          path: /upload-url

package:
  individually: false

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002

resources:
  Resources:

    # --- ARTICLES TABLE ---
    ArticlesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ARTICLES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: slug
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH # Partition Key
        GlobalSecondaryIndexes:
          - IndexName: slug-index
            KeySchema:
              - AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: category-index
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # --- USERS TABLE ---
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        
    # --- CATEGORIES TABLE ---
    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

